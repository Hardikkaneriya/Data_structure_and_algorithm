import heapq
class StockPrice:

    def __init__(self):
        self.timestamps={}
        self.max_time =0
        self.max_price =[]
        self.min_price = []
        

    def update(self, timestamp: int, price: int) -> None:
        self.timestamps[timestamp] = price
        self.max_time = max(self.max_time, timestamp)
        heapq.heappush(self.max_price,(-price,timestamp))
        heapq.heappush(self.min_price,(price,timestamp))

        
        

    def current(self) -> int:
        return self.timestamps[self.max_time]

    def maximum(self) -> int:
        cur_time , timestamp = heapq.heappop(self.max_price)
        while -cur_time != self.timestamps[timestamp]:
            cur_time , timestamp = heapq.heappop(self.max_price)
        heapq.heappush(self.max_price,(cur_time,timestamp))
        return -cur_time

    def minimum(self) -> int:
        cur_time , timestamp = heapq.heappop(self.min_price)
        while cur_time != self.timestamps[timestamp]:
            cur_time , timestamp = heapq.heappop(self.min_price)
        heapq.heappush(self.min_price,(cur_time,timestamp))
        return cur_time


# Your StockPrice object will be instantiated and called as such:
# obj = StockPrice()
# obj.update(timestamp,price)
# param_2 = obj.current()
# param_3 = obj.maximum()
# param_4 = obj.minimum()
